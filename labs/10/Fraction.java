// File: Fraction.java// Author: Seth Roller// Date: 3/27/18// Purpose: To perform fraction calculationsimport java.util.*;  // Scannerimport java.io.*;    // PrintStreampublic class Fraction extends Object{    private int myNumerator;    private int myDenominator;        //********************************************************    // Fraction default-value constructor.                   *    // Precondition: A Fraction object has been declared.    *    // Postcondition: myNumerator == 0 && myDenominator == 1.*    //********************************************************        public Fraction()    {	myNumerator = 0;	myDenominator = 1;    }    public void update(int num, int den)    {	if (den == 0)	    throw new IllegalArgumentException("In Fraction, denominator"					       + " cannot be zero.");	myNumerator = num;	myDenominator = den;    }         //********************************************************    // Fraction explicit-value constructor.                  *    // Precondition: A Fraction object has been declared.    *    // Receive: numerator, denominator, two integers.        *    // Postcondition: myNumerator == numerator &&            *    //                 myDenominator == denominator.         *    //********************************************************        public Fraction(int num, int den)    {        update(num, den);    }		    //********************************************************    // Numerator accessor                                    *    // Return: the value of myNumerator.                     *    //********************************************************    public int getNumerator()    {	return myNumerator;    }        //********************************************************    // Denominator accessor                                  *    // Return: the value of myDenominator.                   *    //********************************************************    public int getDenominator()    {	return myDenominator;    }        //********************************************************    // Input function member                                 *    // Precondition: in contains a Fraction n/d.             *    // Input: in, a Scanner .                                *    // Passback: in, with fraction read                      *    // Postcondition: myNumerator == n && myDenominator == d.*    //********************************************************    public void read(Scanner in)    {	String fract = in.nextLine();	StringTokenizer parser = new StringTokenizer(fract, "/",false);	if (parser.countTokens() != 2)	    throw new RuntimeException("Bad format of fraction.");	int myNum = Integer.parseInt(parser.nextToken());	int myDen = Integer.parseInt(parser.nextToken());	update(myNum, myDen);    }        //********************************************************    // multiplication                                        *    // Receive: rightOperand, a Fraction object.             *    // Return: result, the product of the receiver of        *    //          this message and rightOperand.               *    //********************************************************    public Fraction times(Fraction rightOperand)    {	Fraction result;	result = new Fraction(myNumerator * rightOperand.getNumerator(),			      myDenominator *			      rightOperand.getDenominator());	result.simplify();	return result;    }	    //********************************************************    // Simplify a Fraction from improper to proper.          *    // Postcondition: the Fraction receiving this message    *    //                 is a proper fraction.                 *    //********************************************************    public void simplify()    {	int gcd;	while (true)	{	    gcd = greatestCommonDivisor(myNumerator, myDenominator);	    if (gcd == 1)		return;	    myNumerator = myNumerator / gcd;	    myDenominator = myDenominator / gcd;	}    }			    //********************************************************    // override super classes toString                       *    // Return: String equivalent of fraction                 *    //********************************************************    public String toString()    {	String retval = "";	retval = myNumerator + "/" + myDenominator;	return retval;    }        // **********************************************************    // greatestCommonDivisor finds the greatest common divisor  *    // of two integers, using Euclid's (recursive) algorithm.   *    //                                                          *    //  Receive: alpha, beta, two integers.                     *    //  Return: the greatest common divisor of alpha and beta.  *    //***********************************************************	private static int greatestCommonDivisor(int alpha, int beta)	{		alpha = Math.abs(alpha);		// take absolute values of operands		beta = Math.abs(beta);		if (beta == 0)       // base case			return alpha;		else                 // induction step		{			int remainder = alpha % beta;			return greatestCommonDivisor(beta, remainder);		}	}}